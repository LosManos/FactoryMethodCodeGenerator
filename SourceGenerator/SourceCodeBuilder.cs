using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace SourceGenerator;

internal class SourceCodeBuilder(){

    internal string Build(
        IList<string> output,
        IMethodSymbol mainMethod)
    {
        string source = $@"// <auto-generated/>
// {DateTime.Now:O}
using System;

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public static partial class {mainMethod.ContainingType.Name}
    {{
        static partial void HelloFrom(string name) =>
            Console.WriteLine($""Generator says: Hi from '{{name}}!!!'"");
    }}
}}
";
        return source;
    }

    internal string Build(
        string nameSpace,
        IList<string> output,
        IImmutableList<(TypeCollector.IsOfType isOfType, TypeDeclarationSyntax type, IEnumerable<AttributeSyntax> attribs)> types)
    {
        ClassDeclarationSyntax CreateClass(string name) =>
            SyntaxFactory.ClassDeclaration(SyntaxFactory.Identifier(name))
                .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword));

        var @namespace = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(nameSpace)).AddMembers();
        var autoComment = SyntaxFactory.Comment("// <auto-generated/>");

        string source = $@"{autoComment} 
// {DateTime.Now:O}

// classes:
// {output.StringJoinNL()}

{@namespace.NormalizeWhitespace()}
";
        return source;
    }
}