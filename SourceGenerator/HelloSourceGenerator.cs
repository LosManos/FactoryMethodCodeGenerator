using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace SourceGenerator;

[Generator]
public class HelloSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new TypeCollector());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var typeCollector = (TypeCollector)context.SyntaxReceiver!;
        var compilation = context.Compilation;
        // var model = compilation.GetSemanticModel(compilation.SyntaxTrees.First());

        var output = new List<string>();

        foreach (var classDeclaration in typeCollector.Types)
        {
            var has = classDeclaration.attribs.Any(a =>
                a.Name.ToString() == "Dto" || a.Name.ToString() == "DtoAttribute");

            var outputItem = $"{{{classDeclaration.isOfType}:{
                classDeclaration.type.GetDeclaredSymbol(compilation)},{
                classDeclaration.type.GetType().Name},{
                classDeclaration.attribs.Select(a => a.Name.ToString()).StringJoin()},{
                has}}}";
            output.Add(outputItem);
        }

        // Find the main method
        var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken)
                         ?? throw new Exception("No main method found");

        // Build up the source code
        var consoleSource = BuildSourceCode(output, mainMethod);

        // Add the source code to the compilation
        var typeName = mainMethod.ContainingType.Name;
        context.AddSource($"{typeName}.g.cs", consoleSource);

        var dtoSource = BuildSourceCode("MyGeneratedNamespace", output);
        // Add the source code to the compilation
        context.AddSource($"MyDtos.g.cs", dtoSource);
    }

    private static string BuildSourceCode(
        IList<string> output,
        IMethodSymbol mainMethod)
    {
        string source = $@"// <auto-generated/>
// {DateTime.Now:O}
using System;

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public static partial class {mainMethod.ContainingType.Name}
    {{
        static partial void HelloFrom(string name) =>
            Console.WriteLine($""Generator says: Hi from '{{name}}!!!'"");
    }}
}}
";
        return source;
    }

    private static string BuildSourceCode(
        string nameSpace,
        IList<string> output)
    {
        ClassDeclarationSyntax CreateClass(string name) =>
            ClassDeclaration(Identifier(name))
                .AddModifiers(Token(SyntaxKind.PublicKeyword));

        var ns = NamespaceDeclaration(ParseName(nameSpace)).AddMembers();

        string source = $@"// <auto-generated/>
// {DateTime.Now:O}

// classes:
// {output.StringJoinNL()}

{ns.NormalizeWhitespace()}
";
        return source;
    }
}