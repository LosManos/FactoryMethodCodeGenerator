using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using MyInterface;

namespace SourceGenerator;

[Generator]
public class HelloSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new ClassCollector());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var classCollector = (ClassCollector)context.SyntaxReceiver;
        var compilation = context.Compilation;
        // var model = compilation.GetSemanticModel(compilation.SyntaxTrees.First());

        var output = new List<string>();

        foreach (var classDeclaration in classCollector.Types)
        {
            var has = classDeclaration.attribs.Any(a =>
                a.Name.ToString() == "Dto" || a.Name.ToString() == "DtoAttribute");

            var outputItem = $"{{{classDeclaration.isOfType}:{
                classDeclaration.type.GetDeclaredSymbol(compilation)},{
                classDeclaration.type.GetType().Name},{
                classDeclaration.attribs.Select(a => a.Name.ToString()).StringJoin()},{
                has}}}";
            output.Add(outputItem);
        }

        // Find the main method
        var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

        // Build up the source code
        string source = $@"// <auto-generated/>
// {DateTime.Now:O}
using System;

// classes:
// {output.StringJoinNL()}

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public static partial class {mainMethod.ContainingType.Name}
    {{
        static partial void HelloFrom(string name) =>
            Console.WriteLine($""Generator says: Hi from '{{name}}!!!'"");
    }}
}}
";
        var typeName = mainMethod.ContainingType.Name;

        // Add the source code to the compilation
        context.AddSource($"{typeName}.g.cs", source);
    }

    public class ClassCollector : ISyntaxReceiver
    {
        public enum IsOfType{
            IsClass = 1,
            IsRecord,
        }

        // Classes and Records
        public List<(IsOfType isOfType, TypeDeclarationSyntax @type, IEnumerable<AttributeSyntax> attribs)> Types { get; } = new();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            if (syntaxNode is ClassDeclarationSyntax classDeclaration)
            {
                Types.Add((IsOfType.IsClass, classDeclaration, classDeclaration.AttributeLists.SelectMany(a=>a.Attributes)));
            } else if (syntaxNode is RecordDeclarationSyntax recordDeclarationSyntax)
            {
                Types.Add((IsOfType.IsRecord, recordDeclarationSyntax, recordDeclarationSyntax.AttributeLists.SelectMany(a => a.Attributes)));
            }
        }
    }
}