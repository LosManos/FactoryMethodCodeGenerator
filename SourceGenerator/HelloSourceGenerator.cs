using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace SourceGenerator;

[Generator]
public class HelloSourceGenerator : ISourceGenerator
{
    public void Execute(GeneratorExecutionContext context)
    {
        // Find the main method
        var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken)
                         ?? throw new Exception("Cannot find entry point when generating code");

        var typeDeclarationSyntaxes = new List<TypeDeclarationSyntax>();
        var syntaxTrees = context.Compilation.SyntaxTrees;
        foreach (var syntaxTree in syntaxTrees)
        {
            var root = syntaxTree.GetRoot();

            typeDeclarationSyntaxes.AddRange(root.DescendantNodes().OfType<ClassDeclarationSyntax>());
            typeDeclarationSyntaxes.AddRange(root.DescendantNodes().OfType<RecordDeclarationSyntax>());
        }

        // var interesting = typeDeclarationSyntaxes
        //     .SelectMany(td => td.AttributeLists
        //         .SelectMany(attr => attr.Attributes
        //             .Where(a => a.Name.ToString() == "Dto")));

        var interesting = typeDeclarationSyntaxes
            // .Where(td => td is RecordDeclarationSyntax)
            // .Where(rd => rd.AttributeLists.Count >= 1)
            // .Select(rd =>( rd.Identifier.ToString(), rd.AttributeLists.First().Attributes.First().Name));
            .SelectMany(rd => rd.AttributeLists.SelectMany( al =>
                al.Attributes.Select(a => ("rd", a.Name))));

        var classNames = typeDeclarationSyntaxes.Select(cd => cd.Identifier.Text);
        string classNamesString = string.Join(",", classNames);

        // Build up the source code
        string source = $@"// <auto-generated/>
using System;

// classNames: {classNamesString} C6
// Interesting: 
// {string.Join(",\n// ", interesting)}

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public static partial class {mainMethod.ContainingType.Name}
    {{
        static partial void HelloFrom(string name) =>
            Console.WriteLine($""Generator says: Hi from '{{name}} from 8'"");
    }}
}}
";
        var typeName = mainMethod.ContainingType.Name;

        // Add the source code to the compilation
        context.AddSource($"{typeName}.g.cs", source);
    }

    public void Initialize(GeneratorInitializationContext context)
    {
//        throw new Exception("Test exception!"); // delete me after test
        // No initialization required for this one
    }
}