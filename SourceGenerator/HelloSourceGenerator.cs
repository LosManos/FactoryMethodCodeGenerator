using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using MyInterface;

namespace SourceGenerator;

[Generator]
public class HelloSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new ClassCollector());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var classCollector = (ClassCollector)context.SyntaxReceiver;
        var compilation = context.Compilation;
        var model = compilation.GetSemanticModel(compilation.SyntaxTrees.First());

        var classesImplementingInterface = new List<ClassDeclarationSyntax>();

        var xxx = new List<string>();

        foreach (var classDeclaration in classCollector.Classes)
        {
            try
            {
                var classAndAttributes = (
                    @class: classDeclaration,
                    ass: classDeclaration.AttributeLists.SelectMany(al => al.Attributes),
                    has: classDeclaration.AttributeLists.SelectMany(al => al.Attributes)
                        .Any(a => a.Name.ToString() == "Dto" || a.Name.ToString() == "DtoAttribute")
                );

                var xx = $"{{{
                    classAndAttributes.@class.GetDeclaredSymbol(compilation).ToString()},{
                    classAndAttributes.ass.Select(a => a.Name.ToString()).StringJoin()},{
                    classAndAttributes.has}}}";
                xxx.Add(xx);
            }
            catch (ArgumentException exc) when (exc.Message == "Syntax node is not within syntax tree")
            {
                // Due to, for me, unknown reason, it fails. Like for Program.
            }
        }

        // Find the main method
        var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

        // Build up the source code
        string source = $@"// <auto-generated/>
// {DateTime.Now:O}
using System;

// classes:
// {xxx.StringJoinNL()}

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public static partial class {mainMethod.ContainingType.Name}
    {{
        static partial void HelloFrom(string name) =>
            Console.WriteLine($""Generator says: Hi from '{{name}}!!!'"");
    }}
}}
";
        var typeName = mainMethod.ContainingType.Name;

        // Add the source code to the compilation
        context.AddSource($"{typeName}.g.cs", source);
    }

    public class ClassCollector : ISyntaxReceiver
    {
        public List<ClassDeclarationSyntax> Classes { get; } = new List<ClassDeclarationSyntax>();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            if (syntaxNode is ClassDeclarationSyntax classDeclaration)
            {
                Classes.Add(classDeclaration);
            }
        }
    }
}